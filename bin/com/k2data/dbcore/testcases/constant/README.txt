为方便更新测试数据不必修改代码，将device、sensor和timestamp的大部分信息配置在constant.yaml文件中。

<A> 数据插入规则:
    根据数据的时间点左闭右开插入.例如freq=4时，取值为[0,250)、[250,500)、[500,750)、[750,1000),区间时间单位为ms
    如果一个区间内有多个点，新数据覆盖旧数据
<B> 文件名: 
    TestConstantPointData.csv以及TestConstantPointMeta.csv
<C> 备注:
    为了避免新旧数据和不同人员的数据冲突，添加版本和标识。版本是为了数据更新时避免冲突，标识是为了防止不同人命名冲突,也便于区分是谁的数据。如果删除接口可以用，这些都不是问题。
<D> device命名规则:
    版本+标识+下划线+编号。例如v2chun_01:表示版本号是v2,标识为chun,编号为01的设备
<E> sensor命名规则:
    版本+标识+频次+下划线+编号。例如v2sf4_01:表示版本号是v2,标识为sf,频次为4,编号为01的传感器
    如果该传感器下没有数据，将频次设为0

<F> 数据规则
统一规则:
    1.device和sensor对应关系：奇偶对应。如：基数编号的device对应所有的基数编号的sensor
    2. 数据的value为Integer整型，取值为(秒毫秒),例如第1.25s数据的value为1250,1.249的数据value为1249 (程序中会根据时间点来计算数据的值)
       数据的value为float浮点型，取值为(秒.毫秒),例如第1.25s数据的value为1.25,1.49s的数据value为1.49(程序中会根据时间点来计算数据的值)
    3.数据起始时间：2015-11-06 12:00:00.000 到 2015-11-06 12:00:06.000,也就是0-6s有数据
>> point数据
   1. sensor的frequency = 4
   2. 数据的value为float浮点型
   3. 在0-1秒内没有数据，2-5s内数据有偏移，偏移规则根据编号如下(偏移量都是ms)：
      3.1> device < sensor : 2.25和2.5s数据==>右中，3.25和3.5==>右右，4.25s和4.5s==>右左
      3.2> device < sensor : 2.25和2.5s数据==>左中，3.25和3.5==>左右，4.25s和4.5s==>左左
      3.3> device = sensor : 不偏移。编号=1时，3-4s间多一个点3.9。编号=3时，3-4s间少一个点 3.5
   4. 需要6个传感器和6个设备,编号为0-5,0号sensor的频次为0(没有数据)
    
>> sa数据
    1. sensor的频次规则：
        sensor_01的频次为5,sensor_03的频次为4,sensor_05的频次为10
    2. 数据的value为float浮点型
    3. 设备devices下的传感器数据分布：
			sensors[1]  0-------200-------400-------600-------800-------1000
			sensors[3]  0----------250---------500---------750----------1000
			sensors[5]  0--100--200--300--400--500--600--700--800--900--1000
	4. 需要6个传感器和6个设备,编号为0-5,0号sensor的频次为0(没有数据)

>> 开关类传感器数据
     1. 频次设为10
     2. 毫秒数为单百,取值为1,否则其值为0。如1.0s取值为0, 而1.1s取值为1